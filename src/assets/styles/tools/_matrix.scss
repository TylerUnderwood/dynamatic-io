@use '../functions/builder' as builder;

/*
|––––––––––––––––––––––––––––––––––––––––––––––––––
| UTILITY: Matrix
|––––––––––––––––––––––––––––––––––––––––––––––––––
*/



/*
|–––––––––––––––––––––––––
| Matrix
|–––––––––––––––––––––––––
*/

.matrix {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
}

@include builder.add-breakpoint-prefixes() {
    &matrix {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
    }
}



/*
|–––––––––––––––––––––––––
| Cell
|–––––––––––––––––––––––––
*/

.cell {
    flex-grow: var(--cell-flex, 0);
    flex-shrink: var(--cell-flex, 0);
    flex-basis: auto;
    width: var(--cell-width, auto);
}

$cell_widths: (
    '1\\/12': calc( (1 / 12) * 100% ),
    '1\\/6': calc( (1 / 6) * 100% ),
    '1\\/5': 20%,
    '1\\/4': 25%,
    '1\\/3': calc( (1 / 3) * 100% ),
    '2\\/5': 40%,
    '5\\/12': calc( (5 / 12) * 100% ),
    '1\\/2': 50%,
    '7\\/12': calc( (7 / 12) * 100% ),
    '3\\/5': 60%,
    '2\\/3': calc( (2 / 3) * 100% ),
    '3\\/4': 75%,
    '4\\/5': 80%,
    '5\\/6': calc( (5 / 6) * 100% ),
    '11\\/12': calc( (11 / 12) * 100% ),
    full: 100%,
);

$cell_numbers: (
    12: 12,
    10: 10,
    8: 8,
    6: 6,
    5: 5,
    4: 4,
    3: 3,
    2: 2,
    1: 1,
);

.cells-auto,
.cell-auto {
    --cell-width: unset;
    --cell-flex: 0;
}

@include builder.make-classes-from-list( 'cells', --cells-number, $cell_numbers ) {
    --cell-width: calc( (1 / var(--cells-number)) * 100% );
    --cell-flex: 0;
};

@include builder.make-classes-from-list( 'cell', --cell-width, $cell_widths ) {
    --cell-flex: 0;
};

.cells-fill,
.cell-fill {
    --cell-width: auto;
    --cell-flex: 1;
}

@include builder.add-breakpoint-prefixes() {
    &cells-auto,
    &cell-auto {
        --cell-width: unset;
        --cell-flex: 0;
    }

    @include builder.make-classes-from-list-for-prefixes( 'cells', --cells-number, $cell_numbers ) {
        --cell-width: calc( (1 / var(--cells-number)) * 100% );
        --cell-flex: 0;
    };

    @include builder.make-classes-from-list-for-prefixes( 'cell', --cell-width, $cell_widths ) {
        --cell-flex: 0;
    };

    &cells-fill,
    &cell-fill {
        --cell-width: auto;
        --cell-flex: 1;
    }
}



/*
|–––––––––––––––––––––––––
| Void
|–––––––––––––––––––––––––
*/

:root {
    // default
    --size:             1em;

    // dynamic
    --size-xxs:         0.4rem;
    --size-xs:          0.8rem;
    --size-sm:          1.2rem;
    --size-md:          1.6rem;
    --size-lg:          2.4rem;
    --size-xl:          3.2rem;
    --size-xxl:         6.4rem;
}

// --- convert to scss vars --- //
$size:                var(--size);
$size_xxs:            var(--size-xxs);
$size_xs:             var(--size-xs);
$size_sm:             var(--size-sm);
$size_md:             var(--size-md);
$size_lg:             var(--size-lg);
$size_xl:             var(--size-xl);
$size_xxl:            var(--size-xxl);

// --- add vars to scss list --- //
$sizes: (
    0:                   0,
    xxs:                 $size_xxs,
    xs:                  $size_xs,
    sm:                  $size_sm,
    md:                  $size_md,
    lg:                  $size_lg,
    xl:                  $size_xl,
    xxl:                 $size_xxl,
);

.void {
    --void-x: 1em;
    --void-y: 1em;
    --void-mx: calc(-1 * (var(--void-x) / 2));
    --void-my: calc(-1 * (var(--void-y) / 2));
    --void-px: calc(var(--void-x) / 2);
    --void-py: calc(var(--void-y) / 2);
    margin: var(--void-my) var(--void-mx) !important;
    padding: 0 !important;

    & > .cell {
        margin: 0 !important;
        padding: var(--void-py) var(--void-px) !important;
    }
}

@include builder.make-classes-from-list( 'void', --void-y --void-x, $sizes );
@include builder.make-classes-from-list( 'void-x', --void-y , $sizes );
@include builder.make-classes-from-list( 'void-y', --void-x, $sizes );

@include builder.add-breakpoint-prefixes() {
    &void {
        --void-y: 1em;
        --void-x: 1em;
    }
    @include builder.make-classes-from-list-for-prefixes( 'void', --void-y --void-x, $sizes );

    &void-x {
        --void-y: 1em;
    }
    @include builder.make-classes-from-list-for-prefixes( 'void-x', --void-y , $sizes );

    &void-y {
        --void-x: 1em;
    }
    @include builder.make-classes-from-list-for-prefixes( 'void-y', --void-x, $sizes );
}
